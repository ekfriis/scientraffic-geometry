#!/usr/bin/env python

'''

Find the voronoi diagram of a set of points.

Author: Evan K. Friis

'''

import argparse
from collections import namedtuple
import gzip
import itertools
import logging
import math
import operator

from descartes import PolygonPatch
from shapely.geometry import MultiLineString, MultiPolygon
from shapely.ops import cascaded_union, polygonize
from shapely.wkt import dumps as dump_shape
import matplotlib.pyplot as plt
import numpy as np
from scipy.spatial import Delaunay

log = logging.getLogger(__name__)

NodeInfo = namedtuple('NodeInfo', ['id', 'lat', 'lon', 'clust'])


def read_clusters(gzipped_file):
    """Yield node and cluster info from a gzip file"""
    with gzip.open(gzipped_file, 'rb') as fd:
        for line in fd:
            fields = [int(x) for x in line.strip().split()]
            yield NodeInfo(*fields)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'input', metavar='communities.gz',
        help='Gzipped communities, generated by communities.py')
    parser.add_argument(
        'output', metavar='community_shapes.gz',
        help='Gzipped WKT output polygons')
    parser.add_argument(
        '--cut', default=10, type=float,
        help='alpha parameter cut')

    parser.add_argument(
        '--draw', help='Draw voronoi diagram')

    args = parser.parse_args()

    logging.basicConfig()
    log.setLevel(logging.INFO)

    clustered_nodes = itertools.groupby(
        read_clusters(args.input),
        operator.attrgetter('clust')
    )

    all_points = []
    clust_indices = []

    for clustidx, nodes in clustered_nodes:
        log.info("Processing cluster %i", clustidx)
        node_list = list(nodes)

        # from http://sgillies.net/blog/1155/the-fading-shape-of-alpha/
        all_points.extend([(x.lat, x.lon) for x in node_list])
        clust_indices.extend([clustidx] * len(node_list))

    all_points = np.array(all_points)

    log.info("Found %i points", len(all_points))

    # http://stackoverflow.com/questions/10650645/
    # python-calculate-voronoi-tesselation-from-scipys-delaunay-triangulation-in-3d
    tri = Delaunay(all_points)

    log.info("Done triangulating")
    p = tri.points[tri.vertices]

    def compute_circumcenters(points):
        # Triangle vertices
        A = points[:, 0, :].T
        B = points[:, 1, :].T
        C = points[:, 2, :].T

        # See http://en.wikipedia.org/wiki/
        # Circumscribed_circle#Circumscribed_circles_of_triangles
        # The following is just a direct transcription of the formula there
        a = A - C
        b = B - C

        import pdb
        pdb.set_trace()

        # free memory
        del A
        del B

        # top left bit
        mag_a = np.linalg.norm(a)
        mag_b = np.linalg.norm(a)
        a_cross_b = a.cross(b)
        mag_a_cross_b = np.linalg.norm(a_cross_b)
        d = mag_a**2 * b - mag_b**2 * a
        # circumcenters
        cc = d.cross(a_cross_b) / (2 * mag_a_cross_b**2) + C
        return cc
    cc = compute_circumcenters(p)

    # Grab the Voronoi edges
    vc = cc[:, tri.neighbors]
    # edges at infinity, plotting those would need more work...
    vc[:, tri.neighbors == -1] = np.nan

    lines = []
    lines.extend(zip(cc.T, vc[:,:,0].T))
    lines.extend(zip(cc.T, vc[:,:,1].T))
    lines.extend(zip(cc.T, vc[:,:,2].T))

    m = MultiLineString(lines)

