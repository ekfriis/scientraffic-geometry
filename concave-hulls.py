#!/usr/bin/env python

'''

Find the concave hulls of a set of points using alpha shapes

Author: Evan K. Friis

'''

import argparse
from collections import namedtuple
import gzip
import itertools
import logging
import operator

from dionysus import Filtration, fill_alpha2D_complex

from descartes import PolygonPatch
from shapely.geometry import MultiLineString, MultiPolygon
from shapely.ops import cascaded_union, polygonize
import matplotlib.pyplot as plt

log = logging.getLogger(__name__)

NodeInfo = namedtuple('NodeInfo', ['id', 'lat', 'lon', 'clust'])


def read_clusters(gzipped_file):
    """Yield node and cluster info from a gzip file"""
    with gzip.open(gzipped_file, 'rb') as fd:
        for line in fd:
            fields = [int(x) for x in line.strip().split()]
            yield NodeInfo(*fields)


def simplices(nodes):
    points = [[x.lat, x.lon] for x in nodes]
    complex = Filtration()
    log.info("Finding alpha points for %i nodes", len(points))
    fill_alpha2D_complex(points, complex)
    return points, complex

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'input', metavar='communities.gz',
        help='Gzipped communities, generated by communities.py')
    parser.add_argument(
        '--cut', default=10, type=float,
        help='alpha parameter cut')

    parser.add_argument(
        '--draw', nargs='+', metavar='id',
        type=int, help='Draw specified cluster IDs')

    args = parser.parse_args()

    logging.basicConfig()
    log.setLevel(logging.INFO)

    clustered_nodes = itertools.groupby(
        read_clusters(args.input),
        operator.attrgetter('clust')
    )

    for clustidx, nodes in clustered_nodes:
        log.info("Processing cluster %i", clustidx)
        points, triangles = [x for x in simplices(nodes)]
        log.info("Found %i simplices", len(triangles))
        # from http://sgillies.net/blog/1155/the-fading-shape-of-alpha/
        edge_points = [s for s in triangles if s.data[0] > args.cut]
        coordinates = []
        for edge in edge_points:
            vertices = list(edge.vertices)
            if len(vertices) == 2 and False:
                coordinates.append((
                    tuple(points[vertices[0]]),
                    tuple(points[vertices[1]]),
                ))
            elif len(vertices) == 3:
                coordinates.append((
                    tuple(points[vertices[0]]),
                    tuple(points[vertices[1]]),
                    tuple(points[vertices[2]]),
                    tuple(points[vertices[0]]),
                ))

        log.info("Building line string")
        m = MultiLineString(coordinates)
        log.info("Polygonizing")
        triangles = list(polygonize(m))
        log.info("Unionizing")
        polygon = cascaded_union(triangles)

        best_polygon = polygon
        best_area = 0

        if isinstance(polygon, MultiPolygon):
            log.info("Multi polygons detected")
            for ip, subpoly in enumerate(polygon):
                log.info("Poly %i - area: %f", ip, subpoly.area)
                if subpoly.area > best_area:
                    best_polygon = subpoly
                    best_area = subpoly.area

        if args.draw and clustidx in args.draw:
            fig = plt.figure()
            plt.title("Cluster %i" % clustidx)
            plt.gca().add_patch(PolygonPatch(best_polygon, alpha=0.5))
            plt.gca().autoscale(tight=False)
            plt.plot([x[0] for x in points],
                     [x[1] for x in points], 'o', hold=1)
            fig.savefig("cluster_%i.png" % clustidx)

